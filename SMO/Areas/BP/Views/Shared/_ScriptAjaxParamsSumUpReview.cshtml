
@{ 
    var year = ViewData["year"];
    var url = ViewData["url"];
    var viewId = ViewData["viewId"];
}
@*//
// ĐÂY LÀ ĐOẠN SCRIPT CHUNG ĐƯỢC LẮP VÀO DRILL DOWN FUNCTION
// TRONG CÁC VIEW THẨM ĐỊNH VÀ TỔNG KIỂM SOÁT DỮ LIỆU
//
//*@
<script>
    function onChangeItemApprove(itemClass, itemId, $this) {
                        $(itemId).val($($this).is(':checked') ? 'True' : $(itemId).val() ? null : 'False');
                        $(itemClass).not($this).prop('checked', false);
                        check_uncheck_one('checkOneApprove', '#@viewId #checkAllApprove', 'ignore', 'review-temp-name', '#@viewId');
                        if ($($this).is(':checked')) {
                            // not check denied
                            $('#checkAllDenied')[0].checked = false
                            $('#checkAllHiddenDenied').val('False');
                        }
                    }

            function onChangeItemDenied(itemClass, itemId, $this) {
                        $(itemId).val($($this).is(':checked') ? 'False' : $(itemId).val() ? null : 'False');
                                $(itemClass).not($this).prop('checked', false);
                                check_uncheck_one('checkOneDenied', '#@viewId #checkAllDenied', 'ignore', 'review-temp-name', '#@viewId');
                                if ($($this).is(':checked')) {
                                    // not check approve
                                    $('#checkAllApprove')[0].checked = false
                                    $('#checkAllHiddenApprove').val('False');
                                }
                    }
    function DrillDown(e) {
        var $parent = $(e).parent();
        var $this = $(e);
        var centerCode = $this.attr("centerCode");
        var sumUpVersion = $this.attr("sum_up_version");
        var version = $this.attr("version");
        var elementCode = $this.attr('id');
        var year = @year;
        if (!version) {
            return;
        }
        var parentLevel = parseInt($this.attr("level"));
        var root = $this.attr('root');
        if ($parent.hasClass("expanded")) {
            // collapsed
            if (root == 'true') {
                $.each($parent.siblings(`.${elementCode}`), function (e, v) {
                    $(v).addClass("hidden");
                });
            } else {
                $.each($parent.siblings(`.${elementCode}`), function (e, v) {
                    if (parseInt($(v).attr('level')) > parentLevel) {
                        $(v).addClass("hidden");
                    }
                });
            }

            $parent.addClass("collapsed").removeClass("expanded");
        } else if ($parent.hasClass("collapsed")) {
            // expanded
            if (root == 'true') {
                $.each($parent.siblings(`.${elementCode}`), function (e, v) {
                    $(v).removeClass("hidden");
                });
            } else {
                $.each($parent.siblings(`.${elementCode}`), function (e, v) {
                    if (parseInt($(v).attr('level')) > parentLevel) {
                        $(v).removeClass("hidden");
                    }
                });
            }
            $parent.addClass("expanded").removeClass("collapsed");
        } else {
            Forms.ShowLoading();
            var url = '@url';
            var ajaxParams = {
                url,
                type: "GET",
                contentType: "application/json; charset=utf-8",
                dataType: 'json',
                data: { centerCode, version, elementCode, sumUpVersion, year, isShowFile: true },
                success: function (response) {
                    $parent.addClass("expanded");
                    var lst = JSON.parse(response);

                    // add row
                    lst.sort(byProperty("TEMPLATE_CODE"));
                    $.each(lst, function (index, value) {
                        if (value.IsSkip !== undefined && value.IsSkip) {
                            return true;
                        }

                        var tr = $('<tr>', { class: `child ${elementCode}`, level: parentLevel + 1 });
                        var td = '';
                        td = $('<td>', { class: 'sticky-cell', text: '', version: value.VERSION, sum_up_version: version, centerCode: value.CENTER_CODE, level: parentLevel + 1, id: elementCode, templateCode: value.TEMPLATE_CODE_PURE ? value.TEMPLATE_CODE_PURE : value.TEMPLATE_CODE });
                        if (value.IS_GROUP) {
                            td.append($('<i>', { class: 'material-icons swap-icon-drill-down', text: 'unfold_more', }));
                            td.bind('click', (e) => {
                                DrillDown($(e.target).parent());
                            });
                            td.hover(function () {
                                $(this).addClass("col-fecon").css("cursor", "pointer");
                            },

                                function () {
                                    $(this).removeClass("col-fecon");
                                });
                            tr.append(td);

                            // add column comment
                            td = $('<td>', { class: 'sticky-cell nowrap-white-space align-center ' });
                            td.append($('<a>', {
                                text: value.NUMBER_COMMENTS, href: '#', id: `comment-${elementCode}-${value.ORG_CODE}`,
                                onclick: `LoadComments('${elementCode}', ${year}, ${version}, '${value.ORG_CODE}', '${centerCode}')`
                            }));
                            tr.append(td);
                        } else {
                            tr.append(td);
                            tr.append($('<td>', { text: '', class: 'sticky-cell' }));
                        }

                        tr.append($('<td>', { text: '', class: 'sticky-cell' }));
                        tr.append($('<td>', { text: '', class: 'sticky-cell' }));
                        tr.append($('<td>', { text: '', class: 'sticky-cell' }));

                        var names, div;
                        if (value.IsBase) {
                            var viewBaseFile = $('<i>', { class: 'material-icons font-17 p-r-5 col-fecon', style: 'position: relative; top: 5px; cursor: pointer', text: 'attach_file', onclick: 'toogleShowFileBase(this)' })
                            if ($parent.next().hasClass('file-base')) {
                                $parent = $parent.next();
                            }
                            var lstBaseData = lst.filter((val) => {
                                return val.ValuesBaseString !== null && val.ValuesBaseString.length != 0 && val.TEMPLATE_CODE == value.TEMPLATE_CODE && val.IsBase;
                            });

                            if (value.ValuesBaseString === null) {
                                // is template
                                // show template
                                names = value.ORG_NAME.split("\n");
                                div = $('<div>');
                                $.each(names, function (index, name) {
                                    div.append($('<p>', { html: `${viewBaseFile[0].outerHTML}${name.trim()}` }));
                                        viewBaseFile = $('<i>');
                                });
                                tr.append($('<td>', { class: "sticky-cell" }).append(div));

                                // skip template obj in lst
                                value.IsSkip = true;

                            } else {
                                // is base data
                                // find template
                                var templateObj = lst.find((val) => {
                                    return val.ValuesBaseString === null && val.TEMPLATE_CODE == value.TEMPLATE_CODE && val.IsBase;
                                });
                                // remove template obj in lst
                                lst.splice(lst.indexOf(templateObj), 1);
                                // show template
                                names = value.ORG_NAME.split("\n");
                                div = $('<div>');
                                $.each(names, function (index, name) {
                                    div.append($('<span>', { html: `${viewBaseFile[0].outerHTML}${name.trim()}` }));
                                        viewBaseFile = $('<i>');
                                });
                                tr.append($('<td>', { class: "sticky-cell" }).append(div));

                                value = templateObj;
                            }
                            // add cell value of template obj
                            $.each(value.Values, function (i, val) {
                                td = $('<td>', { text: formatNumber(val), class: "align-right" });
                                tr.append(td);
                            });

                            tr.append($('<td>', { text: formatNumber(value.Values[12] / 12), class: "align-right" }));

                            tr.append($('<td>', { text: value.DESCRIPTION === undefined || value.DESCRIPTION === null ? '' : value.DESCRIPTION }));

                            $parent.after(tr);
                            $parent = $(tr);
                            // show base data
                            $.each(lstBaseData, function (i, baseData) {
                                var tr = $('<tr>', { class: `child ${elementCode}`, level: parentLevel + 2 });
                                tr.append($('<td>', { text: '', class: "sticky-cell" }));
                                tr.append($('<td>', { text: '', class: "sticky-cell" }));
                                tr.append($('<td>', { text: '', class: "sticky-cell" }));
                                tr.append($('<td>', { text: '', class: "sticky-cell" }));
                                tr.append($('<td>', { text: '', class: "sticky-cell" }));
                                names = baseData.ORG_NAME.split("\n");
                                div = $('<div>');
                                $.each(names, function (index, name) {
                                    div.append($('<span>', { text: `${name.trim()}` }));
                                });
                                tr.append($('<td>', { class: "sticky-cell" }).append(div));
                                $.each(baseData.ValuesBaseString, function (i, val) {
                                    names = val.split("\n");
                                    div = $('<div>');
                                    $.each(names, function (index, name) {
                                        div.append($('<p>', { text: `\t${name.trim()}` }));
                                    });
                                    tr.append($('<td>').append(div));
                                });
                                tr.append($('<td>', { text: baseData.DESCRIPTION === undefined || baseData.DESCRIPTION === null ? '' : baseData.DESCRIPTION }));

                                $parent.after(tr);
                                $parent = $(tr);
                                tr.hide().show(1);
                                // skip base data obj in lst
                                lst[lst.indexOf(baseData)].IsSkip = true
                            });
                        } else {
                            names = value.ORG_NAME.split("\n");
                            div = $('<div>');
                            $.each(names, function (index, name) {
                                div.append($('<span>', { text: `${name.trim()}` }));
                            });

                            tr.append($('<td>', { class: "sticky-cell" }).append(div));
                            $.each(value.Values, function (i, val) {
                                td = $('<td>', { text: formatNumber(val), class: "align-right" });
                                tr.append(td);
                            });

                            tr.append($('<td>', { text: formatNumber(value.Values[12] / 12), class: "align-right" }));
                            tr.append($('<td>', { text: value.DESCRIPTION === undefined || value.DESCRIPTION === null ? '' : value.DESCRIPTION }));
                            $parent.after(tr);
                            tr.hide().show(1);
                        }

                    });

                    $parent.addClass("expanded");
                    $(".sticky-table").animate({ scrollLeft: $(".sticky-table").scrollLeft() + 1 }, 1);

                    setCellPadding();
                }
            };
            Forms.Ajax(ajaxParams);
        }
    }

    function toogleShowFileBase(e) {
        e = $(e).closest('tr').find('td')[0];
        var $parent = $(e).parent();
            var $this = $(e);
            var templateCode = $this.attr("templateCode");
            var root = $this.attr('root');
            var elementCode = $this.attr("id");
            var version = $this.attr("sum_up_version");
            var centerCode = $this.attr("centerCode");
            var year = @year;
            var parentLevel = parseInt($this.attr("level"));
        if ($parent.hasClass("expanded-fileBase")) {
            // collapsed
            if (root == 'true') {
                $.each($parent.siblings(`.${elementCode}.file-base`), function (e, v) {
                    $(v).addClass("hidden");
                });
            } else {
                $.each($parent.siblings(`.${elementCode}.file-base`), function (e, v) {
                    $(v).addClass("hidden");
                });
            }

            $parent.addClass("collapsed-fileBase").removeClass("expanded-fileBase");
        } else if ($parent.hasClass("collapsed-fileBase")) {
            // expanded
            if (root == 'true') {
                $.each($parent.siblings(`.${elementCode}.file-base`), function (e, v) {
                    $(v).removeClass("hidden");
                });
            } else {
                $.each($parent.siblings(`.${elementCode}.file-base`), function (e, v) {
                    $(v).removeClass("hidden");
                });
            }
            $parent.addClass("expanded-fileBase").removeClass("collapsed-fileBase");
        } else {
            if (version === undefined || year === undefined) {
                return;
            }
            Forms.ShowLoading();
            var url = '@url';
            var ajaxParams = {
                url,
                type: "GET",
                contentType: "application/json; charset=utf-8",
                dataType: 'html',
                data: { version, year, templateCode, fileBase: true, centerCode },
                success: function (response) {
                    var tr = $('<tr>', { class: `child ${elementCode} file-base`, level: parentLevel + 1 });
                    tr.append($('<td>', { text: '', class: 'sticky-cell' }));
                    tr.append($('<td>', { text: '', class: 'sticky-cell' }));
                    tr.append($('<td>', { text: '', class: 'sticky-cell' }));
                    tr.append($('<td>', { text: '', class: 'sticky-cell' }));
                    tr.append($('<td>', { class: '', text: '', colspan: 16 }).append($('<div>').html(response)));
                    $parent.after(tr);
                    tr.hide().show(1);
                    $parent.addClass("expanded-fileBase").removeClass("collapsed-fileBase");

                    //$parent.addClass("expanded");
                    $(".sticky-table").animate({ scrollLeft: $(".sticky-table").scrollLeft() + 1 }, 1);
                }
            };
            Forms.Ajax(ajaxParams);
        }
    }

    function setCellPadding() {
        const table = $('#@viewId table');
        const allBodyTrs = table.find('tbody tr');
        const nameColumn = 5;
        $.each(allBodyTrs, function (index, row) {
            // check box inside td 6th
            const td = row.getElementsByTagName('td')[nameColumn];
            $(td).css('padding-left', $(row).attr('level') * 20 + 'px');
            $(td).css('width', '350px');
            $(td).css('max-width', '350px');
            $(td).css('min-width', '350px');
        });
    }
</script>