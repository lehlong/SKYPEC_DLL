@model  int?
@{ 
    var emptyColumn = ViewBag.EmptyColumns;
}
<script>
    function DrillDownTemplate(e) {
        var $parent = $(e).parent();
        var $this = $(e);
        var version = $this.attr("version");
        var templateCode = $this.attr("template_code");
        var elementCode = $this.attr('id');
        var centerCode = $this.attr('center_code');
        var root = $this.attr('root');
        var year = @Model;
        if (!version) {
            return;
        }
        var parentLevel = parseInt($this.attr("level"));
            if ($parent.hasClass("expanded")) {
                // collapsed
                if (root == 'true') {
                    $.each($parent.siblings(`.${elementCode}`), function (e, v) {
                        $(v).addClass("hidden");
                    });
                } else {
                    $.each($parent.siblings(`.${elementCode}`), function (e, v) {
                        if (parseInt($(v).attr('level')) > parentLevel) {
                            $(v).addClass("hidden");
                        }
                    });
                }

                $parent.addClass("collapsed").removeClass("expanded");
            } else if ($parent.hasClass("collapsed")) {
                // expanded
                if (root == 'true') {
                    $.each($parent.siblings(`.${elementCode}`), function (e, v) {
                        $(v).removeClass("hidden");
                    });
                } else {
                    $.each($parent.siblings(`.${elementCode}`), function (e, v) {
                        if (parseInt($(v).attr('level')) > parentLevel) {
                            $(v).removeClass("hidden");
                        }
                    });
                }
                $parent.addClass("expanded").removeClass("collapsed");
            } else {
            if (version === undefined || year === undefined) {
                return;
            }
            Forms.ShowLoading();
            var url = '@Url.Action("GetDetailSumUpTemplate")';

            var ajaxParams = {
                url,
                type: "GET",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: { version, elementCode, year, templateCode, centerCode },
                success: function (response) {
                    $parent.addClass("expanded").removeClass("collapsed");
                    var lst = JSON.parse(response);
                    // add row
                    lst.sort(byProperty("TEMPLATE_CODE"));
                    $.each(lst, function (index, value) {

                        var tr = $('<tr>', { class: `child ${elementCode}`, level: parentLevel + 1 });
                        @for (int i = 0; i < emptyColumn; i++)
                                {
                            <text>
                        tr.append($('<td>', { text: '', class: "sticky-cell" }));
                            </text>
                                }

                        var space = '';
                        for (var i = 0; i <= parentLevel; i++) {
                            space += '	';
                        }

                        var names, div;

                        names = value.ORG_NAME.split("\n");
                        div = $('<div>');
                        $.each(names, function (index, name) {
                            div.append($('<span>', { text: `${space}${name.trim()}`, class: "pre-whitespace" }));
                        });
                        tr.append($('<td>', { class: "sticky-cell" }).append(div));
                        $.each(value.ValuesBaseString, function (i, val) {
                            names = val.split("\n");
                            div = $('<div>');
                            $.each(names, function (index, name) {
                                div.append($('<p>', { text: `\t${name.trim()}` }));
                            });
                            tr.append($('<td>', { class: "pre-whitespace align-right" }).append(div));
                        });
                        tr.append($('<td>', { text: value.DESCRIPTION === undefined || value.DESCRIPTION === null ? '' : value.DESCRIPTION }));

                        $parent.after(tr);
                        $parent = $(tr);

                        tr.hide().show(1);
                    });
                    $(".sticky-table").animate({ scrollLeft: $(".sticky-table").scrollLeft() + 1 }, 1);
                }
            };
            Forms.Ajax(ajaxParams);
        }
    }

    // start: tìm kiến từ cột nào (index của cột)
    // end: tìm kiến đến cột nào (index của cột)
    // levelColumnIndex: index của cột chứa level
    // parentColumnIndex: index của cột chứa thuộc tính strong (thuộc tính xác định là khoản mục cha)
    function SearchTable(start, end, levelColumnIndex, parentColumnIndex) {
        // Declare variables
        var input, filter, table, tr, td, i, txtValue;
        input = $("#text-search-table");
        filter = input.val().toUpperCase();

        table = $("#table");
        tr = table.find("tbody tr");
        // Loop through all table rows, and hide those who don't match the search query
        for (i = 0; i < tr.length; i++) {
            let found = false;
            for (var j = start; j >= end; j--) {
                td = tr[i].getElementsByTagName("td")[j];
                if ($(td).hasClass("strong")) {
                    $(tr[i]).removeClass("hidden")
                    found = true;
                    break;
                }
                if (td) {
                    txtValue = td.textContent || td.innerText;
                    if (txtValue.toUpperCase().indexOf(filter) > -1) {
                        $(tr[i]).removeClass("hidden")
                        found = true;
                        break;
                    }
                }
            }
            if (!found) {
                $(tr[i]).addClass("hidden")
            }
        }
        CleanTable(levelColumnIndex, parentColumnIndex);
    }

    // Xóa những parent không có child
    function CleanTable(levelColumnIndex, parentColumnIndex) {
        var table, tr, td, i, value;
        table = $("#table");
        tr = table.find("tbody tr").not(".hidden");
        for (i = 0; i < tr.length; i++) {
            td = tr[i].getElementsByTagName("td")[parentColumnIndex];
            if (tr.length === 1) {
                $(tr[i]).addClass("hidden");
                break;
            }
            let previousIsChild = i === 0 ? true : !$(tr[i - 1].getElementsByTagName("td")[parentColumnIndex]).hasClass("strong");
            let previousLevel = i === 0 ? 0 : $(tr[i - 1].getElementsByTagName("td")[levelColumnIndex]).attr("level");
            if ($(td).hasClass("strong")) {
                if (i === tr.length - 1) {
                    $(tr[i]).addClass("hidden");
                    i -= 2;
                    tr = table.find("tbody tr").not(".hidden");
                } else if (!previousIsChild) {
                    var level = $(td).prev().attr("level");
                    if (level <= previousLevel && previousLevel !== 0) {
                        $(tr[i - 1]).addClass("hidden");
                        i -= 2;
                        tr = table.find("tbody tr").not(".hidden");
                    } else {
                        previousLevel = level;
                    }
                }
            }
        }
    }

    $(document).ready(function () {
        StickyTable();
    });
</script>