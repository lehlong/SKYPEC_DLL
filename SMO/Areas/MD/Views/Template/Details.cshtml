@model SMO.Service.MD.TemplateService
@using SMO.Core.Entities.MD;
@using SMO.Repository.Implement.MD;
@{
    Model.ViewId = Guid.NewGuid().ToString();
    Model.FormId = Guid.NewGuid().ToString();
    var period = SelectListUtilities.GetPureTimeYear();
    var selectList = SelectListUtilities.GetTimeYear(false);
    Model.TIME_YEAR = (int?)selectList.SelectedValue ?? 0;
}

@* load 2 view: edit and tree *@

<div id='@Model.ViewId' class="container-fluid child-content">
    <style>
        .pre-whitespace {
            white-space: pre;
        }
    </style>
    <link href="~/Content/zTreeStyle/zTreeStyle.css" rel="stylesheet" />
    <script src="~/Scripts/Ztree/jquery.ztree.core-3.5.min.js"></script>
    <script src="~/Scripts/Ztree/jquery.ztree.excheck-3.5.min.js"></script>
    <div class="card border-grey">
        <div class="body" style="padding-top: 0px;">
            <div class="p-t-10">
                @Html.MyButton("cmdBack", "Quay lại", string.Format("Forms.Close('{0}');", @Model.ViewId), "Alt+N", "arrow_back")
            </div>

            <ul class="nav nav-tabs tab-nav-right" role="tablist">
                <li role="presentation"><a href="#generalInformation" data-toggle="tab">Thông tin chung</a></li>
                <li role="presentation" class="active"><a href="#detailInformation" data-toggle="tab">Chọn bộ phận và khoản mục</a></li>
            </ul>
            <div class="tab-content">
                <div role="tabpanel" class="tab-pane fade" id="generalInformation">
                    @using (Ajax.BeginForm("Update", null, FormDataUtils.GetAjaxOptions(Model.ViewId), new { @id = Model.FormId }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.HiddenFor(x => x.ObjDetail.CODE)
                        @Html.HiddenFor(x => x.ObjDetail.ORG_CODE)
                        @Html.HiddenFor(x => x.ObjDetail.ELEMENT_TYPE)
                        @Html.HiddenFor(x => x.ObjDetail.BUDGET_TYPE)
                        @Html.HiddenFor(x => x.ObjDetail.OBJECT_TYPE)
                        @Html.HiddenFor(x => x.ObjDetail.ACTIVE)
                        <div class="card">
                            <div class="body" style="padding-top: 0px;">
                                <div class="tab-content">
                                    <div class="page-function">
                                        <div class="page-function-button m-r-20">
                                            @Html.MyButton("cmdSave", "Lưu lại", string.Format("Forms.SubmitForm('{0}');", @Model.FormId), "Alt+N", "done_all")
                                            @Html.MyButton("cmdViewSample",
                                                "Xem trước",
                                                "PreviewTempate();",
                                                "Alt+V", "search")
                                            @Html.MyButton("cmdDownloadTemlate",
                                                "Download mẫu",
                                                "DownloadTemplate();",
                                                "Alt+V", "file_download")
                                        </div>
                                    </div>
                                    <div class="row m-t-20">
                                        <div class="col-xs-1"></div>
                                        <div class="col-lg-7 col-xs-10">
                                            <div class="form-group">
                                                @Html.HiddenFor(x => x.ObjDetail.IS_BASE)
                                                <input name="cbxIsBase"
                                                       class="filled-in"
                                                       id="cbxIsBase"
                                                       @(Model.ObjDetail.IS_BASE ? "checked" : "")
                                                       review-temp-name="checkOne"
                                                       type="checkbox"
                                                       disabled
                                                       value="@Model.ObjDetail.IS_BASE"
                                                       data-val="true">
                                                <label for="cbxIsBase" class="p-r-5"></label>
                                                Là mẫu cơ sở
                                            </div>

                                            @*<label>Đơn vị khai báo dữ liệu</label>
                                                <div class="form-group">
                                                    @Html.MyDropDownListFor(x => x.ObjDetail.ORG_CODE,
                                                     SelectListUtilities.GetChildOrg<T_MD_COST_CENTER, CostCenterRepo>(),
                                                         new
                                                         {
                                                             @class = "selectpicker show-tick",
                                                             @data_live_search = "true",
                                                             @data_container = "body",
                                                             @disabled = "true"
                                                         })
                                                    @Html.ValidationMessageFor(m => m.ObjDetail.ORG_CODE)
                                                </div>*@

                                            <label>Mã mẫu khai báo</label>
                                            <div class="form-group">
                                                <div class="form-line">
                                                    @Html.MyTextBoxFor(m => m.ObjDetail.CODE, new { @disabled = "true" })
                                                </div>
                                                @Html.ValidationMessageFor(m => m.ObjDetail.CODE)
                                            </div>

                                            <label>Tiêu đề</label>
                                            <div class="form-group">
                                                <div class="form-line">
                                                    @Html.MyTextBoxFor(m => m.ObjDetail.TITLE)
                                                </div>
                                                @Html.ValidationMessageFor(m => m.ObjDetail.TITLE)
                                            </div>

                                            <label>Tên mẫu khai báo</label>
                                            <div class="form-group">
                                                <div class="form-line">
                                                    @Html.MyTextBoxFor(m => m.ObjDetail.NAME)
                                                </div>
                                                @Html.ValidationMessageFor(m => m.ObjDetail.NAME)
                                            </div>

                                            <label>Ghi chú</label>
                                            <div class="form-group">
                                                <div class="form-line">
                                                    @Html.MyTextAreaFor(m => m.ObjDetail.NOTES)
                                                </div>
                                                @Html.ValidationMessageFor(m => m.ObjDetail.NOTES)
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }

                </div>
                <div role="tabpanel" class="tab-pane fade in active" id="detailInformation">
                    <div class="card">
                        <div class="body" style="padding-top: 0px;">
                            <div class="tab-content">
                                <div class="page-function">
                                    <div class="page-function-button" style="float:left">
                                        @Html.MyButton("cmdSave", "Lưu lại", "saveDetailInformation()", "Alt+N", "done_all")
                                        @Html.MyButton("cmdViewSample",
                                            "Xem trước",
                                            "PreviewTempate();",
                                            "Alt+V", "search")
                                        @Html.MyButton("cmdDownloadTemlate",
                                            "Download mẫu",
                                            "DownloadTemplate();",
                                            "Alt+V", "file_download")
                                        @Html.MyButton("cmdCopy",
                                            "Copy mẫu",
                                            "CopyTemplate();",
                                            "Alt+V", "transform")
                                    </div>
                                    <div class="input-group page-function-search" style="margin-bottom: 7px !important; width: 150px;">
                                        @Html.MyDropDownListFor(m => m.TIME_YEAR, selectList,
                                        new
                                        {
                                            @onchange = "ChangeYear();",
                                            @data_live_search = "true",
                                            @class = "selectpicker show-tick",
                                            data_container = "body",
                                            @data_val = false
                                        })
                                    </div>
                                </div>
                                <div class="row m-t-20">
                                    <div class="col-md-6">
                                        <div class="input-group page-function-search">
                                            <div class="form-line">
                                                <input class="form-control" id="text-search-center" placeholder="@(Model.ObjDetail.OBJECT_TYPE == TemplateObjectType.Department && Model.ObjDetail.ELEMENT_TYPE != ElementType.DoanhThu ? "Tìm kiếm đơn vị" : "Tìm kiếm hạng mục")" />
                                            </div>

                                            <span class="input-group-addon" title="Tìm kiếm" onclick="SearchTree('divTree', $('#text-search-center').val().trim().toLowerCase(), '#result-center', true)">
                                                <i class="material-icons">search</i>
                                            </span>
                                            <span class="input-group-addon" title="Chuyển đến đơn vị phía trước" onclick="MoveBefore('divTree', '#result-center')">
                                                <i class="material-icons">navigate_before</i>
                                            </span>

                                            <span class="input-group-addon" title="Chuyển đến đơn vị tiếp theo" onclick="MoveNext('divTree', '#result-center', true)">
                                                <i class="material-icons">navigate_next</i>
                                            </span>
                                            <div class="input-group-addon" style="cursor: default">
                                                <span id="result-center"></span>
                                            </div>
                                        </div>
                                        <div class="border-grey">
                                            <ul id="divTree" class="ztree" style="overflow-x: auto; overflow-y: auto"></ul>
                                        </div>
                                    </div>
                                    <div class="col-md-6 hidden" id="search-element">
                                        <div class="input-group page-function-search">
                                            <div class="form-line">
                                                <input class="form-control" id="text-search-element" placeholder="Tìm kiếm khoản mục" />
                                            </div>
                                            <span class="input-group-addon" title="Tìm kiếm" onclick="SearchTree('divTreeElement', $('#text-search-element').val().trim().toLowerCase(), '#result-element');">
                                                <i class="material-icons">search</i>
                                            </span>
                                            <span class="input-group-addon" title="Chuyển đến khoản mục phía trước" onclick="MoveBefore('divTreeElement', '#result-element')">
                                                <i class="material-icons">navigate_before</i>
                                            </span>
                                            <span class="input-group-addon" title="Chuyển đến khoản mục tiếp theo" onclick="MoveNext('divTreeElement', '#result-element', true)">
                                                <i class="material-icons">navigate_next</i>
                                            </span>
                                            <div class="input-group-addon" style="cursor: default">
                                                <span id="result-element"></span>
                                            </div>
                                        </div>
                                        <div class="border-grey">
                                            <ul id="divTreeElement" class="ztree" style="overflow-x: auto; overflow-y: auto">
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        function PreviewTempate() {
            var year = $("#TIME_YEAR").val();
            Forms.LoadAjax('@(Url.Action("ViewTemplate", new { templateId = Model.ObjDetail.CODE }))&year=' + year);
        }

        function DownloadTemplate() {
            var year = $("#TIME_YEAR").val();
            window.open('@(Url.Action("DownloadTemplate", new { templateId = Model.ObjDetail.CODE }))&year=' + year);
        }

        var setting = {
            check: {
                enable: true,
                chkStyle: "checkbox",
                chkboxType: { "Y": "ps", "N": "ps" }
            },
            view: {
                selectedMulti: false,
                nameIsHTML: true,
                showTitle: false
            },
            data: {
                simpleData: {
                    enable: true
                }
            },
            callback: {
                //onAsyncSuccess: showNodesCurrentTask,
                onClick: OnClick,
                onCheck: OnCheck,
                beforeCheck: BeforeCheckCallBack
                //beforeDrop: BeforeDrop,
            }
        };

        function BuildTree() {
            var year = $("#TIME_YEAR").val();
            $('#search-element').addClass("hidden");
            $('#divTree').html("");
            //Forms.ShowLoading();
            var ajaxParams = {
                url: '@Url.Action("BuildTree")',
                type: "GET",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: { templateId: '@Model.ObjDetail.CODE', type: '@TemplateType.CENTER.ToString()', year },
                success: function (response) {
                    //$('#divTreeCostCenter').html(response);
                    $.fn.zTree.init($("#divTree"), setting, response);

                    //DisableTreeNodes('divTree');
                }
            };
            Forms.Ajax(ajaxParams);
        }

        //function DisableTreeNodes(treeId) {
        //    var treeObj = $.fn.zTree.getZTreeObj(treeId);
        //    var nodes = treeObj.getNodes();
        //    for (var i = 0, l = nodes.length; i < l; i++) {
        //        console.log(l);
        //        treeObj.setChkDisabled(nodes[i], true);
        //    }
        //}

        function BuildTreeElement() {
            var year = $("#TIME_YEAR").val();
            $('#divTreeElement').html("");
            //Forms.ShowLoading();
            var ajaxParams = {
                url: '@Url.Action("BuildTree")',
                type: "GET",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: { templateId: '@Model.ObjDetail.CODE', type: '@TemplateType.ELEMENT.ToString()', year },
                success: function (response) {
                    $.fn.zTree.init($("#divTreeElement"), setting, response);
                }
            };
            Forms.Ajax(ajaxParams);
        }

        function OnClick(event, treeId, treeNode) {
            var treeObj = $.fn.zTree.getZTreeObj("divTreeElement");
            var year = $("#TIME_YEAR").val();

            if (treeNode.isParent && treeId === "divTree") {
                // uncheck all node in detail tree
                treeObj.checkAllNodes(false);
                $('#divTreeElement').parent().addClass("hidden");
                $('#search-element').addClass("hidden");

                return;
            }
            if (treeNode.type && treeNode.type === "@Budget.COST_CENTER.ToString()" || treeNode.type === "@Budget.PROFIT_CENTER.ToString()" || treeNode.type === "@Budget.INTERNAL_ORDER.ToString()") {

                $('#divTreeElement').parent().removeClass("hidden");
                $('#search-element').removeClass("hidden");
                //$('#text-search-element').val("");

                // click on infor tree
                // uncheck all node in detail tree
                treeObj.checkAllNodes(false);
                var nodes = treeObj.transformToArray(treeObj.getNodes());
                $.each(nodes, function (index, value) {
                    var findNode = treeObj.getNodesByParam("id", nodes[index].id, null);
                    findNode[0].name = findNode[0].name.replace("<span class='col-red'>","").replace("</span>","");
                    treeObj.updateNode(findNode[0]);
                });

                // get detail information
                //Forms.ShowLoading();
                var ajaxParams = {
                    url: '@Url.Action("GetDetailInformation")',
                    type: "GET",
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: {
                        templateId: '@Model.ObjDetail.CODE',
                        type: treeNode.type,
                        centerCode: treeNode.id,
                        year
                    },
                    success: function (response) {
                        $.each(response, function (index, id) {
                            var node = treeObj.getNodeByParam("id", id, null);
                            if (node) {
                                node.name = "<span class='col-red'>" + node.name + "</span>";
                                treeObj.updateNode(node);
                                treeObj.checkNode(node, true, true, false);

                            }
                        });
                    }
                };
                Forms.Ajax(ajaxParams);
            } else {
                if (treeNode.checked) {
                    treeObj.checkNode(treeNode, false, true, false);
                    treeNode.name = treeNode.name.replace("<span class='col-red'>","").replace("</span>","");
                }
                else {
                    treeObj.checkNode(treeNode, true, true, false);
                    treeNode.name = "<span class='col-red'>" + treeNode.name + "</span>";
                }
                treeObj.updateNode(treeNode);
            }
        }

        function BeforeCheckCallBack(treeId, treeNode) {
            if (treeId !== "divTreeElement") {
                return false;
            }
        };

        function OnCheck(event, treeId, treeNode) {
            if (treeId === "divTreeElement") {
                var treeObj = $.fn.zTree.getZTreeObj("divTreeElement");

                if (treeNode.checked) {
                    treeNode.name = "<span class='col-red'>" + treeNode.name + "</span>";
                }
                else {
                    treeNode.name = treeNode.name.replace("<span class='col-red'>", "").replace("</span>", "");
                }
                treeObj.updateNode(treeNode);
            }
        };

        function saveDetailInformation() {
            var year = $("#TIME_YEAR").val();
            var treeObj = $.fn.zTree.getZTreeObj("divTree");
            var nodes = treeObj.getSelectedNodes();
            var treeDetailObj = $.fn.zTree.getZTreeObj("divTreeElement");
            var detailNodes = treeDetailObj.getCheckedNodes(true);
            var detailCodes = [];
            $.each(detailNodes, function (index, node) {
                if (!node.isParent) {
                    detailCodes.push(node.id);
                }
            });
            if (nodes.length === 0) {
                return;
            }
            Forms.ShowLoading();
                var ajaxParams = {
                    url: '@Url.Action("UpdateDetailInformation")',
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: {
                        year,
                        centerCode: nodes[0].id,
                        template: '@Model.ObjDetail.CODE',
                        detailCodes,
                        centerType: '@Model.ObjDetail.ELEMENT_TYPE' === 'R'? "@Budget.PROFIT_CENTER.ToString()" : "@Budget.COST_CENTER.ToString()",
                    },
                    success: function (response) {
                        Message.execute(response);
                        //BuildTree();
                        //setTimeout(() => treeObj.selectNode(nodes[0], false), 1000);
                        if (detailCodes === [] || detailCodes.length === 0) {
                            treeObj.checkNode(nodes[0], false, true);
                        } else {
                            treeObj.checkNode(nodes[0], true, true);
                        }
                    }
                };
                Forms.Ajax(ajaxParams);

        }

        function triggerSelectCenter() {
            var treeObj = $.fn.zTree.getZTreeObj("divTree");
            var nodes = treeObj.getNodesByFilter(filter); // search the array of the nodes
            if (nodes.length === 0) {
                $('#divTreeElement').parent().addClass("hidden");
                $('#search-element').addClass("hidden");
                return;
            }
            $.each(nodes, function (index, node) {
                if (!node.isParent) {
                    treeObj.selectNode(node, false);
                    OnClick(null, null, node);
                    return false;
                }
            });
        }

        function filter(node) {
            return node != null && node.checked;
        }

        function filterSearch(node) {
            return (node.level == 2 && node.name.indexOf("test")>-1);
        }

        function SetHeightTree() {
            $("#divTree").height($(window).height() - 325);
            $("#divTreeElement").height($(window).height() - 325);
        }

        $(window).on('resize', SetHeightTree);

        $(document).on('keydown', '#text-search-element', function (e) {
            // get keycode of current keypress event
            var code = (e.keyCode || e.which);
            // do nothing if it's an arrow key
            if (code == 37 || code == 38 || code == 39 || code == 40) {
                return;
            }
            if (e.keyCode === 13) {
                var value = $(this).val();
                var filter = value.trim().toLowerCase();

                SearchTree("divTreeElement", filter, "#result-element", false);
            }
        });
        $(document).on('keydown', '#text-search-center', function (e) {
            // get keycode of current keypress event
            var code = (e.keyCode || e.which);
    // do nothing if it's an arrow key
            if (code == 37 || code == 38 || code == 39 || code == 40) {
                return;
            }
            if (e.keyCode === 13) {
                var value = $(this).val();
                var filter = value.trim().toLowerCase();
                SearchTree("divTree", filter, "#result-center", true);
            }
        });

        function SearchTree(treeId, filter, displayResult, isClick) {
            var treeObj = $.fn.zTree.getZTreeObj(treeId);

            var allNodes = treeObj.getNodesByFilter(function (node) {
                return node.search === true;
            });
            $.each(allNodes, function (index, node) {
                node.name = node.name.replace("<span class='bg-red'>", "").replace("</span>", "");
                node.search = false;
                treeObj.updateNode(node);
            });

            if (filter !== '') {
                var nodes = treeObj.getNodesByFilter(function (node) {
                    return node.name.toLowerCase().indexOf(filter) > -1;
                });
                if (nodes.length > 0) {
                    $.each(nodes, function (index, node) {
                        node.search = true;
                        node.name = "<span class='bg-red'>" + node.name + "</span>";
                        treeObj.updateNode(node);
                    });

                    $(displayResult).html(`[?/${nodes.length}]`);
                    MoveNext(treeId, displayResult, isClick);
                } else {
                    $(displayResult).html();
                }
            } else {
                $(displayResult).html();
            }
        }

        function MoveBefore(treeId, displayResult) {
            var currentText = $(displayResult).html().trim();
            if (currentText !== '') {
                var currentPositionText = currentText.substring(1, currentText.indexOf("/"));
                var currentPosition = currentPositionText === '?' ? 0 : parseInt(currentPositionText);

                if (currentPosition > 1) {
                    var totalText = currentText.substring(currentText.indexOf("/") + 1);
                    var total = parseInt(totalText);

                    $(displayResult).html(`[${currentPosition - 1}/${total}]`);

                    var treeObj = $.fn.zTree.getZTreeObj(treeId);
                    var nodes = treeObj.getNodesByFilter(function (node) {
                        return node.name.toLowerCase().indexOf("<span class='bg-red'>") > -1;
                    });
                    treeObj.selectNode(nodes[currentPosition - 2], false);
                    OnClick(null, null, nodes[currentPosition - 2]);
                }
            }
        }

        function MoveNext(treeId, displayResult, isClick) {
            var currentText = $(displayResult).html().trim();
            if (currentText !== '') {
                var totalText = currentText.substring(currentText.indexOf("/") + 1);
                var total = parseInt(totalText);
                var currentPositionText = currentText.substring(1, currentText.indexOf("/"));
                var currentPosition = currentPositionText === '?' ? 0 : parseInt(currentPositionText);

                if (currentPosition < total) {

                    $(displayResult).html(`[${currentPosition + 1}/${total}]`);

                    var treeObj = $.fn.zTree.getZTreeObj(treeId);
                    var nodes = treeObj.getNodesByFilter(function (node) {
                        return node.name.toLowerCase().indexOf("<span class='bg-red'>") > -1;
                    });

                    treeObj.selectNode(nodes[currentPosition], false);
                    if (isClick) {
                        OnClick(null, treeId, nodes[currentPosition]);
                    }
                }
            }
        }

        $(function () {
            BuildTree();
            BuildTreeElement();
            setTimeout(() => triggerSelectCenter(), 2000);
            Forms.CompleteUI();
            SetHeightTree();
        });

        function ChangeYear(year) {
            if (year) {
                $("#TIME_YEAR").val(year);
                $("#TIME_YEAR").selectpicker('refresh');
            } else {
                BuildTree();
                BuildTreeElement();
                setTimeout(() => triggerSelectCenter(), 2000);
            }
        }

        function CopyTemplate() {
            const inputOptions = {
                @foreach (var year in period)
                {
                    <text>@year.TIME_YEAR: '@year.TIME_YEAR',</text>
                }
            };
            var sourceYear = $("#TIME_YEAR").val();
            (async () => {

                const { value: destinationYear } = await Swal.fire({
                    title: 'Chọn năm kế hoạch muốn copy từ năm ' + sourceYear,
                    input: 'select',
                    inputOptions: inputOptions,
                    inputValue: @Model.TIME_YEAR,
                    showCancelButton: true,
                    inputValidator: (destinationYear) => {
                        return new Promise((resolve) => {
                            if (destinationYear !== sourceYear) {
                                resolve()
                            } else {
                                resolve('Năm kế hoạch đích phải khác với năm nguồn.')
                            }
                        })
                    }
                })

                if (destinationYear) {
                    Forms.ShowLoading();
            var ajaxParams = {
                url: '@Url.Action("CopyTemplate")',
                type: "POST",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: { sourceYear, destinationYear, templateId: '@Model.ObjDetail.CODE' },
                success: function (response) {
                    Message.execute(response);
                }
            };
            Forms.Ajax(ajaxParams);
                }

            })()
        }
    </script>
</div>
